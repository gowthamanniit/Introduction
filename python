Python is a widely used general-purpose, high level programming language. It was initially designed by 
Guido van Rossum in 1991 and developed by Python Software Foundation.

version 1.0 was released in 1994.

2.0 was released in 2000,
2.1 -2001


3.7  was released in 2018,

The 2018 Stack Overflow Developer Survey ranked Python as the 7th most popular and the number one most wanted technology of the year. 

extension:****.py

case sensitive langauge.

interpreter langauge.

open source free.

website:(latest 3.7.1 nov-18)
	https://www.python.org/downloads/


//==================================================anupriyan livewire ==========================================
Python:
python too one of a popular programing language
guido van rossum ----1991

python prg is an multi-paradigm programming language

python case sensitive language.

python extension: .py


support some recent technology:

1.cloud computing---iaas,paas,
2.networking
3.big data
4.hacking tools


use:
1.web development
2.software development
3.GUI--graphical user interface
4.Games development
5.Many app


Advantage:
1.python as simple syntax
2.allow the developer to code with in a few lines
3.python run as interpreter
4.python is an object oriented language---
5.debug faster
6.python works on different platforms


download python software:
3.6

open idle-----modes:

1.shell mode:

2.sourcemode:


important features in python:

1.high level prg lanuage
2.simple
3.open source
4.GUI
5.Large standard library
6.object-oriented
7.interpreter
8.platform independent


errors:
1.name error  -- undefined var
2.indent error -- 4 space
3.type error -- str + int
4.syntax error
5.value error -- use input
6.zerodivision error
7.index error


int a=10;
int b=20:

python------define
a=10
b=20
char--collection of char is a string,,





Basic Building blocks:


1.identifier:
name given given to var, fun,  class

eg:salary=20,000
a=20,000

2.variables:
x=5
y="john"
print(x)
print(y)

3.numeric values:
int, float, str,char

a=10

b=1.1

c="welcome"

d="s"

print(a)
print(b)
print(c)
......

operators:

1.Arc opr
Add,sub,div,mul,,modules,,floor div, exponential

x=5
y=3
print(x+y) or z=x+y print(z)


sub:

x=5
y=3
print(x-y)
2


mul:

3*2
4*3


div:

4/2
5/3
5/2 = 2.5

mod:

x=45
y=5
x%y


floor div:
5//2==2

expo:

x=10
y=20

x**y






2.Rel opr:
==     x=10
y=20

x==y

!=------x=10, y=10


>,>=

x=2
y=4
x>y--true

<,<=

3.log ope--

And---

1  0   1  0
0  1   1  1
0  0   1  0







Or---

1  0  0  1

0  1  0  1
1  1  0  1







Not--

1  0 

1  0
1   1




4.Bitwise

Bitwise and
x=10  0000 1010
y=4   0000 0100

&	Bitwise AND	x& y = 0 (0000 0000)
|	Bitwise OR	x | y = 14 (0000 1110)
~	Bitwise NOT	~x = -11 (1111 0101)
^	Bitwise XOR	x ^ y = 14 (0000 1110)
>>	Bitwise right shift	x>> 2 = 2 (0000 0010)
<<	Bitwise left shift	x<< 2 = 40 (0010 1000)

Assignment operators in Python
Operator	Example	Equivatent to
=	x = 5	x = 5
+=	x += 5	x = x + 5
-=	x -= 5	x = x - 5
*=	x *= 5	x = x * 5
/=	x /= 5	x = x / 5
%=	x %= 5	x = x % 5
//=	x //= 5	x = x // 5
**=	x **= 5	x = x ** 5
&=	x &= 5	x = x & 5
|=	x |= 5	x = x | 5
^=	x ^= 5	x = x ^ 5
>>=	x >>= 5	x = x >> 5
<<=	x <<= 5	x = x << 5

5.special opr
  (i)-identity oper
      used to find value is similar or not
     
 is
is not

x1 = 5
y1 = 5
x2 = 'Hello'
y2 = 'Hello'
x3 = [1,2,3]
y3 = [1,2,3]

# Output: False
print(x1 is not y1)

# Output: True
print(x2 is y2)

# Output: False
print(x3 is y3)





  (ii)-membership operator

  used to find whether value is valid or not

in
not in

x = 'Hello world'
y = {1:'a',2:'b'}

# Output: True
print('H' in x)

# Output: True
print('hello' not in x)

# Output: True
print(1 in y)

# Output: False
print('a' in y)



Control statements:

decision making sta...

1.simple if
2.if-else
3.nested -if
4.elif statement


simple if:

if cond true it will print the statement

if-else:

if the cond is true it will print valid user or else it will print invalid user


nested if:
if


   if ()
      pr

pr



elif:


short for if-else
it allow to check the multiple expression


conditional loop statement:
while loop:

break:

continue:

for loop

do-while:

nested -loop:





while loop:
execute statement untill condition is true:


break and continue:















